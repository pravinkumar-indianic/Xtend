<div class="ui container" id="resultsmanagement" data-navoption = "{{ __SELF__.navoption }}">
	<div class="ui stackable grid">
        {% if manager == true and __SELF__.html1 %}
		<div class="six wide tablet four wide computer column" id="html1target-dont-use">
			{{ __SELF__.html1|raw }}
		</div>
        {% endif %}
		<div class="ten wide tablet twelve wide computer column" id="html2target">
			{{ __SELF__.html2|raw }}
		</div>
	</div>
</div>

{% put scripts %}
<script>
  $('body').on('click', 'button.new-section.save', function (e) {
    e.preventDefault();

    var inputs = $('#new-section-form :input');
    if (inputs) {
      let data = [];
      inputs.each(function () {
        if (this.name) {
          data[this.name] = $(this).val();
        }
      });

      if (data) {
        requestFactory('onNewSection', data, ['#section-wrapper'], () => {
          $('[data-control="fileupload"]').fileUploader();
          initTinyMceEditors();
        });
        $('#section-name').val('');
      }
    }
  });

  $('body').on('change', '#step-1-dropdown', function (e) {
    let id = $('#step-1-dropdown').val();

    if (id) {
      let data = [];
      data['id'] = id;
      requestFactory('onChangeSection', data, ['#section-criteria-wrapper'], () => {
        $('[data-control="fileupload"]').fileUploader();
        initTinyMceEditors();
      });
    }
  });

  $('body').on('click', 'button.new-section-criteria.save', function (e) {
    e.preventDefault();

    var inputs = $('#new-criteria-form :input');
    if (inputs) {
      let data = [];
      inputs.each(function () {
        if (this.name) {
          if (this.name == 'dashboard_only') {
            data[this.name] = $(this).parent().hasClass('checked') ? 1 : 0;
          } else {
            data[this.name] = $(this).val();
          }
        }
      });

      let tinymceContent = tinymce.get("tooltip").getContent();
      if (tinymceContent) {
        data['tooltip'] = tinymceContent;
      }

      if (data) {
        requestFactory('onNewSectionCriteria', data, ['#section-criteria-wrapper'], () => {
          initTinyMceEditors();
        });
        $('#section-name').val('');
      }
    }
  });

  $('body').on('click', 'button.section-criteria.edit', function (e) {
    e.preventDefault();
    let id = $(this).attr('data-id');
    if (id) {
      var data = {
        'id': id,
      };
      requestFactory('onEditSectionCriteria', data, ['#section-criteria-wrapper'], () => {
        initTinyMceEditors();
      });
    }
  });

  $('body').on('click', 'button.section-criteria.delete', function (e) {
    e.preventDefault();
    if (confirm('Are you sure you want to delete this criteria?') == true) {
      let id = $(this).attr('data-id');
      if (id) {
        var data = {
          'id': id,
        };
        requestFactory('onDeleteSectionCriteria', data, ['#section-criteria-wrapper'], () => {
          initTinyMceEditors();
        });
      }
    }
  });

  $('body').on('click', 'button.section-criteria.update', function (e) {
    e.preventDefault();

    var inputs = $('#criteria-form :input');
    if (inputs) {
      let data = [];
      inputs.each(function () {
        if (this.name) {
          if (this.name == 'dashboard_only') {
              data[this.name] = $(this).parent().hasClass('checked') ? 1 : 0;
          } else {
              data[this.name] = $(this).val();
          }
        }
      });

      let tinymceContent = tinymce.get("tooltip").getContent();
      if (tinymceContent) {
        data['tooltip'] = tinymceContent;
      }

      if (data) {
        requestFactory('onUpdateSectionCriteria', data, ['#section-criteria-wrapper'], () => {
          initTinyMceEditors();
        });
      }
    }
  });

  $('body').on('click', 'button.criteria-target.save', function (e) {
    e.preventDefault();

    var inputs = $('#criteria-target-form :input');
    if (inputs) {
      let data = [];
      inputs.each(function () {
        if (this.name) {
          data[this.name] = $(this).val();
        }
      });

      if (data) {
        requestFactory('onNewSectionCriteriaTarget', data, ['#criteria-targets']);
      }
    }
  });

  $('body').on('click', 'a.tab', function (e) {
    e.preventDefault();
    let id = $(this).attr('data-id');
    if (id) {
      var data = {
        'id': id,
      };
      requestFactory('onStepChange', data, ['#html2target'], () => {
        initTinyMceEditors();
      });
    }
  });

  $('body').on('click', 'a.section-import-download-errors', function (e) {
    console.log('yup');
    target = $(this);
    target.addClass('loading');
    var id = $(this).attr('data-id');
    if (id) {
      $.request('onDownloadImportErrors', {
        data: {
          'id' : id,
        },
        success: function(response)
        {
          if (response.manualerror) {
            alert(response.manualerror);
            target.removeClass('loading');
            return false;
          }
          // The actual download
          // Note: Code has been copied from MyProgram231219.js
          var blob = new Blob([response], { type: 'text/csv' });
          var link = document.createElement('a');
          link.href = window.URL.createObjectURL(blob);
          link.download = 'ImportErrorsReport.csv';
          document.body.appendChild(link);
          link.click();
          document.body.removeChild(link);
          target.removeClass('loading');
        },
        error: function(data){
          throw data;
        },
      });
    }
  });

  $('body').on('click','.filter.export.button.leaderboard', function(e) {
    e.preventDefault();

    target = $(this);
    target.addClass('loading');
    $.request('onExportLeaderboardReport', {
      success: function(response)
      {
        if (response.manualerror) {
          alert(response.manualerror);
          target.removeClass('loading');
          return false;
        }
        // The actual download
        var blob = new Blob([response], { type: 'text/csv' });
        var link = document.createElement('a');
        link.href = window.URL.createObjectURL(blob);
        link.download = 'LeaderboardReport.csv';
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
        target.removeClass('loading');
      },
      error: function(data){
        throw data;
      },
    });
  });

  </script>

<script src="{{ 'assets/js/vendor/tinymce/tinymce.min.js'|theme }}"></script>
<script src="{{ 'assets/js/vendor/tinymce/themes/modern/theme.min.js'|theme }}"></script>
<script>
  function initTinyMceEditors() {
    //Editor page hmtl editor triggers
    'use strict'
    tinymce.remove();
    tinymce.init({
      menubar: false,
      selector: '.tinymceeditor',
      placeholder: "Tooltip",
      height: 100,
      plugins: [
        'link'
      ],
      toolbar: 'link',
      content_css: [
        '/themes/xtend/assets/css/codepen.min.css'
      ]
    });
  }

  initTinyMceEditors();
</script>

{% endput %}
